name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]
    
    - name: Lint with pylint
      run: |
        pylint pr_review_agent/ --fail-under=8.0
    
    - name: Format check with black
      run: |
        black --check pr_review_agent/ tests/
    
    - name: Import sort check with isort
      run: |
        isort --check-only pr_review_agent/ tests/
    
    - name: Type check with mypy
      run: |
        mypy pr_review_agent/
    
    - name: Security check with bandit
      run: |
        bandit -r pr_review_agent/ -f json -o bandit-report.json
    
    - name: Run tests with pytest
      run: |
        pytest --cov=pr_review_agent --cov-report=xml --cov-report=html -v
      env:
        GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.TEST_OPENAI_API_KEY }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration-test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Install from wheel
      run: |
        pip install dist/*.whl
    
    - name: Test CLI installation
      run: |
        pr-review --help
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v
      env:
        GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, security, build, integration-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Determine version bump
      id: version
      run: |
        # Use semantic versioning based on commit messages
        if git log --pretty=format:%s -1 | grep -q "BREAKING CHANGE\|!:"; then
          echo "bump=major" >> $GITHUB_OUTPUT
        elif git log --pretty=format:%s -1 | grep -q "^feat"; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.bump }}
        release_name: Release v${{ steps.version.outputs.bump }}
        draft: false
        prerelease: false
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
